require(lme4)
require(MuMIn)
require(r2glmm)




###Code adapted from LDG-2016 course week 7 supplementary materials

setwd("C:\\Users\\Nathan\\Desktop\\Trial1Gravity\\Grav\\Gravity\\Genetics")

Dirs<-list.dirs(getwd(),recursive=FALSE)
Dirs
##first two directories are IBR and IBD

for(j in 1:sum(length(Dirs)-2)){

#####DistMat and IBD distances will be consistent across each time step (time step151-651)
	IBR<-list.files(Dirs[1])
	DistMat<-as.matrix(read.csv(paste(c(Dirs[1],"/",IBR[1]),sep="",collapse=""),header=FALSE))
	PopDist<-as.matrix(DistMat[!duplicated(DistMat),!duplicated(DistMat)])

	IBD<-list.files(Dirs[2])
	IBDDist<-as.matrix(read.csv(paste(c(Dirs[2],"/",IBD[j]),sep="",collapse=""),header=FALSE))
	PopIBD<-as.matrix(IBDDist[!duplicated(IBDDist),!duplicated(IBDDist)])

	##Will have to subset the distances based on which populations are surviving,
	##so we will take the lower.tri of the matrices within the Genetic for-loop section

####Genetic distances and extant populations may change dependent on the timestep
##Pass over the IBR and IBD directories
	setwd(Dirs[j+2])

	directories<-list.dirs()
directories
#choose extant file directory
Extant<-list.files(directories[2])

##First directory is just ".", and second are Extant populations, so start at directory 3
for(k in 3:length(directories)){

##create output data frame
	OUT<-matrix(NA,ncol=5)

##choose genetic files
	genetics<-list.files(directories[k])

	for(i in 1:length(genetics)){
		Gen<-as.matrix(read.csv(paste(c(directories[k],"/",genetics[i]),sep="",collapse=""),header=FALSE))
		Gen<-Gen[lower.tri(Gen)]

		extant.pop<-as.matrix(read.csv(paste(c(directories[2],"/",Extant[i]),sep="",collapse=""),header=FALSE)) 

	
		pop1 <- t(matrix(c(extant.pop),length(extant.pop),length(extant.pop)))
		pop1 <- pop1[lower.tri(pop1)]
		pop2 <- (matrix(c(extant.pop),length(extant.pop),length(extant.pop)))
		pop2 <- pop2[lower.tri(pop2)]


		PopDist1<-PopDist[extant.pop[,1],extant.pop[,1]]
		PopIBD1<-PopIBD[extant.pop[,1],extant.pop[,1]]
	
		PopDist1<-PopDist1[lower.tri(PopDist1)]
		PopIBD1<-PopIBD1[lower.tri(PopIBD1)]

		PopDist1 <- scale(PopDist1)      # Each predictor variable is centred around the mean.
		PopIBD1<-scale(PopIBD1)	
		Gen<-scale(Gen)


		Distmat <- data.frame(pop1, pop2, PopDist1, PopIBD1, Gen)

		##I don't know what this part is for; I'm guessing it was needed for example data.
		##it inverts a pop1/pop2 column for our data so do not use 	  	
		#n <- nrow(Distmat)
		#Distmat[c(2,n-1),1:2] <- Distmat[c(2,n-1),2:1]
    

		lmer_form <- as.formula("Gen ~ PopDist1 + PopIBD1 + (1|pop1)")
    		Zl <- lapply(c("pop1","pop2"), function(nm) Matrix:::fac2sparse(Distmat[[nm]],"d", drop=FALSE))
    		ZZ <- Reduce("+", Zl[-1], Zl[[1]])

		mod <- lFormula(Gen ~ PopDist1 + PopIBD1  + (1|pop1), data = Distmat, REML = TRUE)
			mod$reTrms$Zt <- ZZ
			dfun <- do.call(mkLmerDevfun,mod)
    			opt <- optimizeLmer(dfun)

    		mod_1 <- mkMerMod(environment(dfun), opt, mod$reTrms,fr = mod$fr)

		##Row et al. (2015 Ecol and Evol) found that this r.squaredGLMM function better		
		##aligned with AICc output than the R-squared beta suggested by Van Strien et al. (2012 Mol. Ecol.)
		## and Edwards et al. (2008 Stat. Med.)

		R2<-r.squaredGLMM(mod_1)

		R2B<-r2beta(mod_1,partial=FALSE)

		###create a null model
		mod2 <- lFormula(Gen ~ 1  + (1|pop1), data = Distmat, REML = TRUE)
			mod2$reTrms$Zt <- ZZ
			dfun2 <- do.call(mkLmerDevfun,mod2)
   			opt2 <- optimizeLmer(dfun2)
		mod_2 <- mkMerMod(environment(dfun2), opt2, mod$reTrms,fr = mod2$fr)


		##Vaida and Blanchard (2005 Biometrika) argue that AIC can be used for REML
		##if the question is based on a population (not-genetic term) level question.
		##Because we are concerned with the marginal R-squared, we are concerned with
		##the population/marginal AIC.  This means we can account for the random-effects
		##based on populations as a single term.

		D.AICc<-AICc(mod_1)-AICc(mod_2)
		REML.crit<-getME(mod_1,"devcomp")
		REML.crit<-a$cmp[7]

		output<-cbind(R2[1],R2[2],R2B$Rsq,D.AICc,REML.crit)
		colnames(output)<-c("R2m","R2c","R2beta","Delta.AICc","REML Criterion")
		rownames(output)<-genetics[i]

		OUT<-rbind(OUT,output)

	}

	OUT<-na.omit(OUT)


	write.csv(OUT, paste(c(getwd(),"/",directories[k],"_GLMMgrav",".csv"),sep="",collapse=""))
	write.csv(OUT, paste(c(getwd(),directories[k],j,"_GLMMgrav",".csv"),sep="",collapse=""))
}


}
