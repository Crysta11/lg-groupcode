require(lme4)
require(MuMIn)
require(r2glmm)




###Code adapted from LDG-2016 course week 7 supplementary materials

#----------------------------File Management--------------------------#

##Directory where all the genetics are.  File management is as follows:
#First folder within the genetics folder contains IBR distance matrices, folder named "1_Cost"
#second folder contains IBD distnaces, folder named "2_IBD"
#There are duplicate cost/IBD files equal to the number of MC runs being analyzed
#Rest of the folders are folders of Genetic output for each MC run
#Within each MC run folders, there are folders for "Extant" and genetic distances.
#The Extant files should be relabeled to "1_Extant" so it won't interfere with the for-loop later
#Output files will be written to MC run folders.

#-------------------------Directory Map-------------------------------#
#	Genetics
#		1_Cost
#		2_IBD
#		con2hab2
#			-1_Extant
#			-Dps
#			-Fst
#			-Nei
#			-PCA
#			-[file output]

#---------------------------------------------------------------------#

setwd("C:\\Users\\Nathan\\Desktop\\Trial1Gravity\\Grav\\Gravity\\Genetics")

Dirs<-list.dirs(getwd(),recursive=FALSE)

#Dirs lists the cost, IBD, and MC run files

#####DistMat and IBD distances will be consistent across each time step (time step151-651)

#this lists the cost distance associated for each MC run

	IBR<-list.files(Dirs[1])
	
#This will read in the cost file associated for each MC run
	DistMat<-as.matrix(read.csv(paste(c(Dirs[1],"/",IBR[1]),sep="",collapse=""),header=FALSE))
	
#Because the files are individuals, we subset down to populations by not getting duplicates
	PopDist<-as.matrix(DistMat[!duplicated(DistMat),!duplicated(DistMat)])

#Do the same for IBD 
	IBD<-list.files(Dirs[2])
	IBDDist<-as.matrix(read.csv(paste(c(Dirs[2],"/",IBD[j]),sep="",collapse=""),header=FALSE))
	PopIBD<-as.matrix(IBDDist[!duplicated(IBDDist),!duplicated(IBDDist)])

	##Will have to subset the distances based on which populations are surviving,
	##so we will take the lower.tri of the matrices within the Genetic for-loop section

##first two directories are IBR and IBD, so need to remove 2 for the length of Dirs
##in the for-loop

for(j in 1:sum(length(Dirs)-2)){

####Genetic distances and extant populations may change dependent on the timestep

## Because the first 2 files are Cost and IBD, start on the 3rd directory

	setwd(Dirs[j+2])

##directories will be the "1_Extant" and the genetic distance folders

	directories<-list.dirs()

##The first directory is the "." directory, so start with "./1_Extant"

#choose extant file directory
Extant<-list.files(directories[2])

##First directory is just ".", and second are Extant populations, so start at directory 3
for(k in 3:length(directories)){

##create output data frame
	OUT<-matrix(NA,ncol=6)

##choose genetic files-this will cycle through  "Dps","Fst","Nei", and "PCA" fiels
	genetics<-list.files(directories[k])

	for(i in 1:length(genetics)){
		Gen<-as.matrix(read.csv(paste(c(directories[k],"/",genetics[i]),sep="",collapse=""),header=FALSE))
		Gen<-Gen[lower.tri(Gen),diag=FALSE]

		extant.pop<-as.matrix(read.csv(paste(c(directories[2],"/",Extant[i]),sep="",collapse=""),header=FALSE)) 

		#Pop 1 makes a from population
		pop1 <- t(matrix(c(extant.pop),length(extant.pop),length(extant.pop)))
		pop1 <- pop1[lower.tri(pop1),diag=FALSE]
		
		#Pop 2 makes a to population
		pop2 <- (matrix(c(extant.pop),length(extant.pop),length(extant.pop)))
		pop2 <- pop2[lower.tri(pop2),diag=FALSE]

		#resample the cost distances for the matrices
		PopDist1<-PopDist[extant.pop[,1],extant.pop[,1]]
		PopIBD1<-PopIBD[extant.pop[,1],extant.pop[,1]]
	
		PopDist1<-PopDist1[lower.tri(PopDist1),diag=FALSE]
		PopIBD1<-PopIBD1[lower.tri(PopIBD1),diag=FALSE]

		PopDist1 <- scale(PopDist1)      # Each predictor variable is centred around the mean.
		PopIBD1<-scale(PopIBD1)	
		Gen<-scale(Gen)


		Distmat <- data.frame(pop1, pop2, PopDist1, PopIBD1, Gen)

		##I don't know what this part is for; I'm guessing it was needed for example data.
		##it inverts a pop1/pop2 column for our data so do not use 	  	
		#n <- nrow(Distmat)
		#Distmat[c(2,n-1),1:2] <- Distmat[c(2,n-1),2:1]
    

		lmer_form <- as.formula("Gen ~ PopDist1 + PopIBD1 + (1|pop1)")
    		Zl <- lapply(c("pop1","pop2"), function(nm) Matrix:::fac2sparse(Distmat[[nm]],"d", drop=FALSE))
    		ZZ <- Reduce("+", Zl[-1], Zl[[1]])

		mod <- lFormula(Gen ~ PopDist1 + PopIBD1  + (1|pop1), data = Distmat, REML = TRUE)
			mod$reTrms$Zt <- ZZ
			dfun <- do.call(mkLmerDevfun,mod)
    			opt <- optimizeLmer(dfun)

    		mod_1 <- mkMerMod(environment(dfun), opt, mod$reTrms,fr = mod$fr)

		##Row et al. (2015 Ecol and Evol) found that this r.squaredGLMM function better		
		##aligned with AICc output than the R-squared beta suggested by Van Strien et al. (2012 Mol. Ecol.)
		## and Edwards et al. (2008 Stat. Med.)
		
		#Row et al. recommended:
			R2<-r.squaredGLMM(mod_1)

		#Edwards et al:
			R2B<-r2beta(mod_1,partial=FALSE)
		
		#get the root mean square errors, too, why not.
			RMSE<-summary(mod_1)$sigma

		###create a null model
		mod2 <- lFormula(Gen ~ 1  + (1|pop1), data = Distmat, REML = TRUE)
			mod2$reTrms$Zt <- ZZ
			dfun2 <- do.call(mkLmerDevfun,mod2)
   			opt2 <- optimizeLmer(dfun2)
		mod_2 <- mkMerMod(environment(dfun2), opt2, mod$reTrms,fr = mod2$fr)


		##Vaida and Blanchard (2005 Biometrika) argue that AIC can be used for REML
		##if the question is based on a population (not-genetic term) level question.
		##Because we are concerned with the marginal R-squared, we are concerned with
		##the population/marginal AIC.  This means we can account for the random-effects
		##based on populations as a single term.

		D.AICc<-AICc(mod_1)-AICc(mod_2)
		REML.crit<-getME(mod_1,"devcomp")
		REML.crit<-REML.crit$cmp[7]

		output<-cbind(R2[1],R2[2],R2B$Rsq,RMSE,D.AICc,REML.crit)
		colnames(output)<-c("R2m","R2c","R2beta","RMSE","Delta.AICc","REML Criterion")
		rownames(output)<-genetics[i]

		OUT<-rbind(OUT,output)

	}

	OUT<-na.omit(OUT)

###I have two options for writing files; they are written to the MC run folder, but when working with them later,
##may help to have a numeric [j] value associated with the file

	write.csv(OUT, paste(c(getwd(),"/",directories[k],"_GLMMgrav",".csv"),sep="",collapse=""))
	write.csv(OUT, paste(c(getwd(),directories[k],j,"_GLMMgrav",".csv"),sep="",collapse=""))
}


}
