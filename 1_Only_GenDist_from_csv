
# PACKAGE REQUIREMENTS ================================================

require(PopGenReport)
require(poppr)
require(strataG)
require(ecodist)
require(adegenet)
require(imputeTS)
require(foreach)
require(doParallel)
require(gtools)
require(filesstrings)
require(optparse)
require(stringr)


# GENETIC DISTANCE CALCULATION ========================================

# Dps function script -------------------------------------------------
# Wasn't calling function, so copied and pasted from github

pairwise.propShared <- function(gi) {
  
  n.pops <- length(unique(pop(gi)))
  allPairs <- combn(1:n.pops, 2)
  gen.mat<- matrix(0, nrow = n.pops, ncol = n.pops)
  pops <- seppop(gi)
  pspop <- function(x) {
    pp  <- seppop(x)
    p1 <- pp[[1]]
    p2 <- pp[[2]]
    
    na <- ncol(p1@tab)
    maf <- NA
    m1 <- colMeans(p1@tab[,], na.rm = T) / 2
    m2 <- colMeans(p2@tab[,], na.rm = T) / 2
    
    m12 <- apply(rbind(m1, m2), 2, min, na.rm = T)
    
    lfl <- NA
    facs <- levels(p1@loc.fac)
    for (i in 1:length(locNames(p1))) 	lfl[i] <- sum(m12[p1@loc.fac == facs[i]])
    mean(lfl, na.rm = T)	
  }
  
  for (i in 1:ncol(allPairs)) {
    np1 <- allPairs[1, i]
    np2 <- allPairs[2, i]
    
    p12 <- repool(pops[[np1]], pops[[np2]])
    ps <- pspop(p12)
    gen.mat[np1, np2] <- ps
    gen.mat[np2, np1] <- ps
  }

  la <- levels(pop(gi))
  colnames(gen.mat) <- rownames(gen.mat) <- la
  return(as.dist(gen.mat))
}

# DKF function code ---------------------------------------------------

Cavalli_kinship <- function(x, diag = FALSE, upper = FALSE) {
  # Dkf equation from Microsatellite Analyzer
  # kf = Sum of Loci (Sum of alleles (fa, i * fa, j))) / D 
  # Sum over all loci and all alleles 
  # fa, i / a, j = frequency of allele a in pop i / j 
  # D = number of loci 
  # The distance can be taken as: Dkf = -ln(kf), or Dfs'= 1 - kf 
  
  # create an empty matrix for population comparisons
  if (!is.genpop(x))
    stop("x is not a valid genpop object")
  
  # checks to see ploidy of the data
  
  # haploidy kludge (have to get rid of that later)
  if (x@ploidy == as.integer(1)) {
    x@tab <- x@tab * 2
    x@ploidy <- as.integer(2)
  }
  # check marker type
  checkType(x)
  
  # number of loci
  nloc <- length(levels(x@loc.fac))
  
  # of loci separated by number of alleles
  loc.fac <- x@loc.fac
  
  # make an allele frequency table
  X <- makefreq(x, missing = "mean", quiet = TRUE)
  
  # nlig=the number of populations
  nlig <- nrow(X)
  
  # create an empty matrix for population comparisons
  
  Dkf_dist <- matrix(ncol = nlig, nrow = nlig)
  
  for(z in 1:(nlig - 1)) {
    
    # only need to calculate 1/2 of the table, so z+1 here
    for(i in (z + 1):(nlig)) { 
      # pop1 to pop2 is equal to all the allele frequencies multiplied
      # together, then summed. Then divided by the number of loci 
      # and subtracted from one (Cavalli-Sforza 1971-The Genetics of Human Populations)
      Dkf_dist[z, i] <- 1 - (sum(X[z, ] * X[i, ]) / length(x@loc.n.all))
    }
  }
  
  # create a symmetrical matrix from 
  Dkf_dist[lower.tri(Dkf_dist)] <- t(Dkf_dist)[lower.tri(Dkf_dist)]
  diag(Dkf_dist) <- 0
  
  return(Dkf_dist)
}

# Create the Genetic Distance Function that will write all the code

GD_function <- function(i) { 
 
  split <- strsplit(Extant_Pop_Files[i], split = "_")
  
  trial <- paste0(split[[1]][1], "_", split[[1]][2])
  
  method <- split[[1]][3]
  
  map <- paste0(split[[1]][4], "_", split[[1]][5],"_", split[[1]][6],"_", split[[1]][7])
  
  mcrun <- paste0(split[[1]][8], "_", split[[1]][9])
  
  generation <- paste0(split[[1]][10], "_", extract_numbers(split[[1]][11]))
  
  
  # Pairwise Fst  From PopGenReport ----------------------------
  
  Gen_csv<-read.csv(Extant_Pop_Files[i])
  GenG<-df2genind(Gen_csv[,9:1508],ncode=3L,ind.names=Gen_csv[,4],pop=Gen_csv[,1], ploidy=2)
  
  Fst <- pairwise.fstb(GenG)
  write.table(Fst, file = paste0(output_dir, "/", trial, "_", method, "_Fst_", map, "_", mcrun,
  "_", generation, ".csv"), row.names = FALSE, col.names = FALSE, sep = ",")
  
  
  # Pairwise Dps From PopGenReport -----------------------------
  # PCA and Dps cannot do NA values, so set allele freq. to zero for those
  Dps <- as.matrix(pairwise.propShared(GenG))
  
  write.table(Dps, file = paste0(output_dir, "/", trial, "_", method, "_Dps_", map, "_", mcrun,
  "_", generation, ".csv"), row.names = FALSE, col.names = FALSE, sep = ",")
  
  
  # PCA From adegenet --------------------------------------
  population_gen <- genind2genpop(GenG)
  
  PCA <- scaleGen(population_gen, scale = FALSE)
  
  pca <- dudi.pca(PCA, center = FALSE, scale = FALSE, scannf = FALSE, nf = 2)
  pca.dist <- data.frame(pca$li)
  pca.euc <- ecodist::distance(pca.dist, method = "euclidean", sprange = NULL, spweight = NULL)
  pca.mat <- as.matrix(pca.euc)
  write.table(pca.mat,file = paste0(output_dir, "/", trial, "_", method, "_PCA_", map, "_", mcrun,
  "_", generation, ".csv"), row.names = FALSE, col.names = FALSE, sep = ",")
  
  # Extant Populations -----------------------------------------
  # Check this
  SurvivingPops <- unique(as.vector(read.csv(paste0(Extant_Pop_Files[i]))[, 1]))
  write.table(SurvivingPops,file = paste0(Output_directory,"/",trial,"_",method,"_Extant_",map,"_",mcrun,"_",generation,".csv"),row.names=FALSE,col.names=FALSE,sep=",")
  
  # Nei's D From adegenet (?) ----------------------------------
  NeiD <- as.matrix(dist.genpop(population_gen, method = 1, diag = TRUE, upper = TRUE), ncol = length(SurvivingPops))
  
  write.table(NeiD, file = paste0(output_dir, "/", trial, "_", method, "_NeiD_", map, "_", mcrun,
  "_", generation, ".csv"), row.names = FALSE, col.names = FALSE, sep = ",")
  
  # Dkf Kinship Coefficient ------------------------------------
  Kin <- Cavalli_kinship(population_gen, diag = TRUE, upper = TRUE)
  write.table(Kin, file = paste0(output_dir, "/", trial, "_", method, "_Dkf_", map, "_", mcrun,
  "_", generation, ".csv"), row.names = FALSE, col.names = FALSE, sep = ",")
  
}

# FUNCTIONS TO APPLY GENETIC CODE TO DATA DIRECTORY STRUCTURE =========

Dir_Function <- function(j) {
  # set working directory to iteratively read each CDPOP MC folder
  # choose a directory with all the grid gen
  setwd(paste(c(input_dir, "/", directories[j]), sep = "", collapse = ""))
  Extant_Pop_Files<-mixedsort(list.files(pattern=".csv$",full.names=FALSE))
  sapply(Total_Gens, GD_function)
}

StringToPattern <- function(string, end) {
  # parses input from a sting with containing [0-9] ',' and '-' into regex pattern
  # input is interpreted as ranges and individual numbers, output matches all numbers
  # at end of expression. Does not support ranges starting with integers above 9
  # or ending with integers above 9 as this is not currently needed added complexity
  # Examples:
  #    '1'      -> '(1)$'
  #    '3,6'    -> '(3|6)$'
  #    '2,5-10' -> '(2|[5-9]|10)$'
  pattern = "("
  individual <- strsplit(string, split = ',')

  for (x in individual[[1]]) {
    if (!grepl("-", x)) { 
      if (pattern != "(")
        pattern <- paste0(pattern, '|')
       pattern <- paste0(pattern, x)
 
   } else {
      if (pattern != "(")
        pattern <- paste0(pattern, '|')

      split <- strsplit(x, split = '-')
      start <- split[[1]][1]
      end <- split[[1]][2]

      if ((nchar(start) == 1) & (nchar(end) == 1) ) {
        pattern <- paste0(pattern, '[', x, ']')
      } else if (end == "10") {
          pattern <- paste0(pattern, '[', start, '-9]|10')
      } else {
	stop("having a starting range for your MC trials above 9, or ending above 10 is not currently supported")
      }
    }
  }

  pattern <- paste0(pattern, ')')
  if (end) {
  pattern <- paste0(pattern, '$')
  }
  print(pattern)
  return(pattern)
}

# BEGIN CODE EXECUTION ================================================

# Parse parameters ----------------------------------------------------

option_list = list (
  make_option(c("-i", "--input"), default = "/scratch/cgantz/Rename1",
  help = "directory containing data in correct directory structure [default=%default]"),

  make_option(c("-o", "--output"), default = "/scratch/cgantz/LDG_Output_test",
  help = "directory that will be created to write output files to [default=%default]"),

  make_option(c("-m", "--MCtrials"), default = NULL,
  help = "specify which MC trials to analyze, list seperated by ',' and range seperated by '-'
  example: -m 2,4,5-8",),

  make_option(c("-a", "--analysisType"), default = NULL,
  help = "specify which analysis types to analyze (ie 'IBR'), list seperated by ','
  example: -a IBR,IBE",)
)

opt_parser = OptionParser(option_list = option_list)
opt = parse_args(opt_parser)
print(opt)

# Create Master Folders and Directories -------------------------------

# File format set to have folders of all the CDPOP runs within the working directory
# Directories should be a list of file folders, each containing a CDPOP MC run
# (e.g. con2hab2_2, which will be a file folder with all the necessary "grid.gen" files)
print("check1")
input_dir <- opt$input[[1]]
output_dir <- opt$output[[1]]
raw_mc <- opt$MCtrials[[1]]
raw_analysis <- opt$analysisType[[1]]
mc_pattern <- sapply(raw_mc, end=TRUE, StringToPattern)
analysis_type <- sapply(raw_analysis, end=FALSE, StringToPattern)
print("check2")
print(mc_pattern)
print(analysis_type)
print(input_dir)


#dir.create(output_dir)
setwd(input_dir) 

directories <- mixedsort(list.dirs( ,recursive = FALSE))
directories <- grep(mc_pattern, directories, value = TRUE)
directories <- grep(analysis_type, directories, value = TRUE)
print(directories)

# Choose which generations to compute
Iterative_gens <- seq(276, 501, 25)
Total_Gens <- c(151:251, Iterative_gens)

# Run the code --------------------------------------------------------


sapply(1:length(directories), Dir_Function)
