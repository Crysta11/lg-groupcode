library(PopGenReport)
library(gtools)
library(GeNetIt)
require(Matrix)
require(dplyr)

#We will establish all directories here. Transferance between machines/runs only needs to be changed here.
file_dir<-"C:\\Users\\nba2\\Desktop\\LDG_Output_T1_IBR_0.50.5_MC6-10"
CDPOP_input<-"C:\\Users\\nba2\\Desktop\\CD_XY_files"
out_dir<-"C:/Users/nba2/Desktop/DGS_2016_IBE_output"

#####################################################
#####################################################

###We will recreate this function to also give us RMSE

lgrMMRR <- function(gen.mat, cost.mats, eucl.mat=NULL, nperm=999)
{

##### MMRR function of Wang
# MMRR performs Multiple Matrix Regression with Randomization analysis
# Y is a dependent distance matrix
# X is a list of independent distance matrices (with optional names)

MMRR<-function(Y,X,nperm=999){
	#compute regression coefficients and test statistics
	nrowsY<-nrow(Y)
	y<-unfold(Y)
	if(is.null(names(X)))names(X)<-paste("X",1:length(X),sep="")
        Xmats<-sapply(X,unfold)   
        fit<-lm(y~Xmats)
	coeffs<-fit$coefficients
	summ<-summary(fit)
	r.squared<-summ$r.squared
	tstat<-summ$coefficients[,"t value"]
	Fstat<-summ$fstatistic[1]
	tprob<-rep(1,length(tstat))
	Fprob<-1
	RMSE<- sqrt(mean((fitted.values(fit) - Xmats )^2))

	#perform permutations
	for(i in 1:nperm){
		rand<-sample(1:nrowsY)
		Yperm<-Y[rand,rand]
		yperm<-unfold(Yperm)
		fit<-lm(yperm~Xmats)
		summ<-summary(fit)
                Fprob<-Fprob+as.numeric(summ$fstatistic[1]>=Fstat)
                tprob<-tprob+as.numeric(abs(summ$coefficients[,"t value"])>=abs(tstat))
	}

	#return values
	tp<-tprob/(nperm+1)
	Fp<-Fprob/(nperm+1)
	names(r.squared)<-"r.squared"
	names(coeffs)<-c("Intercept",names(X))
	names(tstat)<-paste(c("Intercept",names(X)),"(t)",sep="")
	names(tp)<-paste(c("Intercept",names(X)),"(p)",sep="")
	names(Fstat)<-"F-statistic"
	names(Fp)<-"F p-value"
	names(RMSE)<-"RMSE"
	return(list(r.squared=r.squared,
		coefficients=coeffs,
		tstatistic=tstat,
		tpvalue=tp,
		Fstatistic=Fstat,
		Fpvalue=Fp, RMSE=RMSE))
}

# unfold converts the lower diagonal elements of a matrix into a vector
# unfold is called by MMRR

unfold<-function(X){
	x<-vector()
	for(i in 2:nrow(X)) x<-c(x,X[i,1:i-1])
	return(x)
}



mats <- cost.mats
if (!is.null(eucl.mat)) mats$Euclidean <- eucl.mat


res <- MMRR(gen.mat, mats, nperm=nperm)

mmrr.mat <- data.frame(layer=names(res$coefficients), coefficient= res$coefficients, tstatistic=res$tstatistic, tpvalue = res$tpvalue, Fstat= NA, Fpvalue = NA, r2=NA, RMSE=NA )

row.names(mmrr.mat)=NULL
mmrr.mat <- mmrr.mat[order(mmrr.mat$tpvalue),]
mmrr.mat$Fstat[1] <- res$Fstatistic
mmrr.mat$Fpvalue[1] <- res$Fpvalue
mmrr.mat$r2[1] <- res$r.squared
mmrr.mat$RMSE[1]<-res$RMSE




return(list(mmrr.tab=mmrr.mat))
}

##Code adapted from LDG-2016 course week 7 supplementary materials


####################################
####################################
Dirs<-list.files(file_dir)

CDPOP_dirs<-list.files(CDPOP_input)

##first directory are cost distances

allfiles = list.files(file_dir)
extantfiles = list.files(pattern ='Extant')
genetics <-allfiles[!allfiles %in% extantfiles]
OUT<-matrix(NA,ncol=19)
colnames(OUT)<-c("trial","driver","genetic","con","hab","mc","generation","layer","coefficient","tstatistic","tpvalue","Fstat","Fpvalue","r2","RMSE","Intercept",
	"Intercept_coefficient","Intercept_tstatistic","Intercept_tpvalue")
for(i in genetics){
	split <-strsplit(i,split="_")
 	trial=as.numeric(split[[1]][2])
  	driver=split[[1]][3]
  	driver1=strsplit(driver,split="1")
  	driver1=driver1[[1]][1]
  	genetic=split[[1]][4]
  	con=as.numeric(split[[1]][6])
  	hab=as.numeric(split[[1]][8])
  	mc=as.numeric(split[[1]][10])
  	generation=as.numeric(strsplit(split[[1]][12],split="[.]")[[1]][1])

#we will only be reading in the distance matric
	DistMat<-as.matrix(read.csv(paste0(CDPOP_input,"/IBE_CD_Trial_",trial,"_con_",con,"_hab_",hab,"_.csv"),header=FALSE))
	PopDist<-DistMat[1:40,1:40]

	Gen<-as.matrix(read.csv(paste0(file_dir,"/",i),header=FALSE))

	PopDist1 <- scale(PopDist)
	Gen<-scale(Gen)

##because we only have one parameter we've simulated impacting dispersal for IBE, we list it as the Environmental cost
	EnvCost<-list(PopDist1)

##execute PopGenReport's analysis based on Wang et al. 2013 Evolution
	a<-lgrMMRR(Gen, EnvCost,eucl.mat= NULL, nperm = 999)

##The r^2 value and p-value are stored in the first line of output
##becuase we don't need the equations for the output, just extract the first line of output for each lgrMMR run
## and save that into the output matrix

	b<-cbind(trial,driver,genetic,con,hab,mc,generation,a$mmrr.tab[which(a$mmrr.tab$layer=='X1'),1:4],a$mmrr.tab[1,5:8],a$mmrr.tab[which(a$mmrr.tab$layer=='Intercept'),1:4])
	colnames(b)<-c("trial","driver","genetic","con","hab","mc","generation","layer","coefficient","tstatistic","tpvalue","Fstat","Fpvalue","r2","RMSE","Intercept",
	"Intercept_coefficient","Intercept_tstatistic","Intercept_tpvalue")
	print(b)
	OUT<-rbind(OUT,b)

}

OUT<-na.omit(OUT)
write.csv(OUT, paste0(out_dir,"/","T_",trial,"_IBE_",driver1,"_",con,"_",hab,"_mc_",mc,".csv"))

}

