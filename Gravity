require(GeNetIt)



setwd("C:\\Users\\Nathan\\Desktop\\Trial1Gravity\\Grav_Grav\\Gravity\\Genetics")
Dirs<-list.dirs(getwd(),recursive=FALSE)

##first two directories are IBR and IBD
for(j in 1:sum(length(Dirs)-2)){



#####DistMat and IBD distances will be consistent across each time step (time step151-651)
	IBR<-list.files(Dirs[1])
	DistMat<-as.matrix(read.csv(paste(c(Dirs[1],"/",IBR[j]),sep="",collapse=""),header=FALSE))
	PopDist<-as.matrix(DistMat[!duplicated(DistMat),!duplicated(DistMat)])

	IBD<-list.files(Dirs[2])
	IBDDist<-as.matrix(read.csv(paste(c(Dirs[2],"/",IBD[j]),sep="",collapse=""),header=FALSE))
	PopIBD<-as.matrix(IBDDist[!duplicated(IBDDist),!duplicated(IBDDist)])

##Since we didn't record habitat parameters when generating the files, use initial population assignments
## in lieu of habitat variables

#this code generated population sizes for gravity CDPOP input:
#results$prop.prop <- round((results$prop.landscape/total)*600+10)

	PopSize<-as.matrix(table(DistMat[,1]))
	PopSize<-PopSize[,1]
	habitat<-(PopSize-10)/600
	habitat <- t(matrix(c(habitat),length(habitat),length(habitat)))

####Genetic distances and extant populations may change dependent on the timestep
##Pass over the IBR and IBD directories

	setwd(Dirs[j+2])


#choose extant file directory

	directories<-list.dirs()

Extant<-list.files(directories[2])

##First directory is just ".", and second are Extant populations, so start at directory 3
for(k in 3:length(directories)){

##create output data frames
	OUT_U<-matrix(NA,ncol=2)
	OUT_C<-matrix(NA,ncol=2)

	genetics<-list.files(directories[k])

for(i in 1:length(genetics)){

		Gen<-as.matrix(read.csv(paste(c(directories[k],"/",genetics[i]),sep="",collapse=""),header=FALSE))
		Gen<-Gen[lower.tri(Gen)]

		extant.pop<-as.matrix(read.csv(paste(c(directories[2],"/",Extant[i]),sep="",collapse=""),header=FALSE)) 


		pop1 <- t(matrix(c(extant.pop),length(extant.pop),length(extant.pop)))
		pop1 <- pop1[lower.tri(pop1)]
		pop2 <- (matrix(c(extant.pop),length(extant.pop),length(extant.pop)))
		pop2 <- pop2[lower.tri(pop2)]

		PopDist1<-PopDist[extant.pop[,1],extant.pop[,1]]
		PopIBD1<-PopIBD[extant.pop[,1],extant.pop[,1]]
		habitat1<-habitat[extant.pop[,1],extant.pop[,1]]

		PopDist1<-PopDist1[lower.tri(PopDist1)]
		PopIBD1<-PopIBD1[lower.tri(PopIBD1)]
		habitat1<-habitat1[lower.tri(habitat1)]

		PopDist1 <- scale(PopDist1)      # Each predictor variable is centred around the mean.
		PopIBD1<-scale(PopIBD1)	
		Gen<-scale(Gen)
		Hab<-scale(habitat1)	

	Distmat <- data.frame(pop1, pop2, PopDist1, PopIBD1, habitat1, Gen)



##Not sure of the difference, so there's a constrained and unconstrained model

mod_C<-gravity(y="Gen",group="pop1",data=Distmat,ln=FALSE,constrained=TRUE)
mod_U<-gravity(y="Gen",x="habitat1",d="PopDist1",group="pop1",data=Distmat,ln=FALSE,constrained=FALSE)


#Extract the RMSE value from the model... since it's in astring, need to cut it from the string

val_C<-summary(mod_C)
RootRsq_C<-as.numeric(unlist(regmatches(val_C,gregexpr("[[:digit:]]+\\.*[[:digit:]]*",val_C))))

val_U<-summary(mod_U)
RootRsq_U<-as.numeric(unlist(regmatches(val_U,gregexpr("[[:digit:]]+\\.*[[:digit:]]*",val_U))))

##bind the RMSE and AIC output

		output_C<-cbind(RootRsq_C,mod_C$AIC)
		output_U<-cbind(RootRsq_U,mod_U$AIC)
	
 #name the columns and rows
	colnames(output_C)<-c("RMSE","AIC")
	colnames(output_U)<-c("RMSE","AIC")
		rownames(output_C)<-genetics[i]
		rownames(output_U)<-genetics[i]

		OUT_C<-rbind(OUT,output_C)
		OUT_U<-rbind(OUT,output_U)

}

#omit the initial NAs
	OUT_C<-na.omit(OUT_C)
	OUT_U<-na.omit(OUT_U)

	write.csv(OUT_C, paste(c(getwd(),"/",directories[k],"_Grav_C",".csv"),sep="",collapse=""))
	write.csv(OUT_U, paste(c(getwd(),directories[k],j,"_Grav_U",".csv"),sep="",collapse=""))
}


}
